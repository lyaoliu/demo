<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tool"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd">
    <!-- jndi 连接数据源-->
    <!--<bean id="dataSource1" class="org.springframework.jndi.JndiObjectFactoryBean" >-->
        <!--<property name="jndiName" value="java:comp/env/jdbc/tgdld"></property>-->
    <!--</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--数据库驱动类-->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!--数据库用户名-->
        <property name="username" value="${jdbc.username}" />
        <!--数据库密码-->
        <property name="password" value="${jdbc.password}" />
        <!--数据库连接路径-->
        <property name="url" value="${jdbc.url}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:config/mapping/**/*.xml"></property>
        <!-- 引入Mybatis配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
        <property name="plugins" ref="pageInterceptor"></property>
    </bean>

    <!-- mybatis拦截器，实现分页 -->
    <bean id="pageInterceptor" class="com.lyliu.common.interceptor.PageInterceptor">
        <property name="dialectType" value="mysql"></property>
    </bean>
    <!--
          Mybatis-Spring为我们提供了一个实现了SqlSession接口的SqlSessionTemplate类，它是线程安全的，可以被多个Dao同时使用。
          同时它还跟Spring的事务进行了关联，确保当前被使用的SqlSession是一个已经和Spring的事务进行绑定了的。
          而且它还可以自己管理Session的提交和关闭。当使用了Spring的事务管理机制后，SqlSession还可以跟着Spring的事务一起提交和回滚。
       -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
       <bean id="dao" class="com.lyliu.common.dao.Dao">
           <property name="sqlSession" ref="sqlSession"></property>
       </bean>
        <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
   <!-- <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource" />
    </bean>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
</beans>